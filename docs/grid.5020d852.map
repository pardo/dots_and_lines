{"version":3,"sources":["grid.js"],"names":["GridGame","initialize","container","size","serializedHistory","currentPlayer","points","connectedPoints","completedBlocks","currentPlayerElement","otherPlayerElement","createDom","pushToHistory","checkEnd","width","height","alert","isSquareComplete","x","y","tl","tr","bl","br","checkAndMark","markedBlock","markBlockAsActive","connectPoints","x0","y0","x1","y1","origin","destination","markLineAsActive","marked","updateCurrentPlayer","switchCurrentPlayer","push","JSON","stringify","serialize","popFromHistory","history","pop","undefined","unserialize","parse","onClickLine","markBlockAs","isActive","element","document","getElementById","classList","remove","add","markLineAs","createDotElement","parent","createElement","className","appendChild","createLineElement","isVertical","id","addEventListener","e","createHorizontalLineElement","createVerticalLineElement","createBlockElement","createRowElement","createRowDotLine","row","createLineBlockRow","createCurrentPlayerLabel","innerText","data","line","save","localStorage","setItem","load","window","getItem","game","which","log"],"mappings":"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","file":"grid.5020d852.map","sourceRoot":"..","sourcesContent":["import './grid.css'\n\nfunction GridGame () {\n  this.initialize = function (container) {\n    this.container = container\n    this.size = {\n      width: 6,\n      height: 6\n    }\n\n    this.serializedHistory = []\n    // could be either blue or red\n    this.currentPlayer = 'blue'\n    this.points = {\n      'blue': 0,\n      'red': 0\n    }\n    // every time a line is made we store a true value here\n    // line information will be a double point key\n    // x0-y0-x1-y1 where 0 is the top left point and 1 is the bottom right\n    // and example could be\n    // '0-0-0-1': false\n    // '0-0-0-1': 'blue'\n    // '0-0-0-1': 'red'\n    // '0-0-1-1' not valid it is a diagonal\n    // '0-0-1-0: valid\n    this.connectedPoints = {}\n    // data will be like { 'x-y': 'blue', 'x-y': 'red', 'x-y': false }\n    this.completedBlocks = {}\n    this.currentPlayerElement = null\n    this.otherPlayerElement = null\n    this.createDom()\n    this.pushToHistory()\n  }\n\n  this.checkEnd = function () {\n    let current = this.points['red'] + this.points['blue']\n    let total = this.size.width * this.size.height\n    if (current === total) {\n      if (this.points['red'] > this.points['blue']) {\n        window.alert('Red Player Won')\n      } else if (this.points['red'] < this.points['blue']) {\n        window.alert('Blue Player Won')\n      } else {\n        window.alert('No winners')\n      }\n    }\n  }\n\n  this.isSquareComplete = function (x, y) {\n    // if all the lines of the current block are marked then is complete\n    let tl = `${x}-${y}`\n    let tr = `${x + 1}-${y}`\n    let bl = `${x}-${y + 1}`\n    let br = `${x + 1}-${y + 1}`\n    return this.connectedPoints[`${tl}-${tr}`] && this.connectedPoints[`${tl}-${bl}`] && this.connectedPoints[`${bl}-${br}`] && this.connectedPoints[`${tr}-${br}`]\n  }\n\n  this.checkAndMark = function (x, y, currentPlayer) {\n    // return true if the block is now complete and marked by the current player\n    let markedBlock = false\n    if (!this.completedBlocks[`${x}-${y}`] && this.isSquareComplete(x, y)) {\n      markedBlock = true\n      this.completedBlocks[`${x}-${y}`] = currentPlayer\n      this.markBlockAsActive(x, y, currentPlayer)\n    }\n    return markedBlock\n  }\n\n  this.connectPoints = function (x0, y0, x1, y1, currentPlayer) {\n    let origin = `${x0}-${y0}`\n    let destination = `${x1}-${y1}`\n    if (this.connectedPoints[`${origin}-${destination}`]) {\n      // already taken\n      return false\n    }\n    this.markLineAsActive(x0, y0, x1, y1, currentPlayer)\n    this.connectedPoints[`${origin}-${destination}`] = currentPlayer\n    let marked = 0\n    marked += this.checkAndMark(x0, y0, currentPlayer) ? 1 : 0\n    marked += this.checkAndMark(x0 - 1, y0, currentPlayer) ? 1 : 0\n    marked += this.checkAndMark(x0, y0 - 1, currentPlayer) ? 1 : 0\n    if (marked > 0) {\n      this.points[this.currentPlayer] += marked\n      this.updateCurrentPlayer(this.currentPlayer)\n      this.checkEnd()\n    } else {\n      this.switchCurrentPlayer(this.currentPlayer)\n    }\n    return true\n  }\n\n  this.pushToHistory = function () {\n    this.serializedHistory.push(JSON.stringify(this.serialize()))\n  }\n\n  this.popFromHistory = function () {\n    var history = this.serializedHistory.pop()\n    if (history === undefined) { return }\n    this.unserialize(JSON.parse(history))\n  }\n\n  this.onClickLine = function (x0, y0, x1, y1) {\n    this.pushToHistory()\n    if (!this.connectPoints(x0, y0, x1, y1, this.currentPlayer)) {\n      this.serializedHistory.pop()\n    }\n  }\n\n  this.switchCurrentPlayer = function (currentPlayer) {\n    this.currentPlayer = currentPlayer === 'blue' ? 'red' : 'blue'\n    this.updateCurrentPlayer(this.currentPlayer)\n  }\n\n  // DOM RELATED\n  this.markBlockAsActive = function (x, y, currentPlayer) {\n    this.markBlockAs(x, y, true, currentPlayer)\n  }\n\n  this.markBlockAs = function (x, y, isActive, currentPlayer) {\n    let element = document.getElementById(`block-${x}-${y}`)\n    if (!element) { return }\n    element.classList.remove('active')\n    element.classList.remove('blue')\n    element.classList.remove('red')\n    if (isActive) {\n      element.classList.add('active')\n    }\n    if (currentPlayer) {\n      element.classList.add(currentPlayer)\n    }\n  }\n\n  this.markLineAsActive = function (x0, y0, x1, y1, currentPlayer) {\n    this.markLineAs(x0, y0, x1, y1, true, currentPlayer)\n  }\n  this.markLineAs = function (x0, y0, x1, y1, isActive, currentPlayer) {\n    let element = document.getElementById(`line-${x0}-${y0}-${x1}-${y1}`)\n    if (!element) { return }\n    element.classList.remove('active')\n    element.classList.remove('blue')\n    element.classList.remove('red')\n    if (isActive) {\n      element.classList.add('active')\n    }\n    if (currentPlayer) {\n      element.classList.add(currentPlayer)\n    }\n  }\n\n  this.createDotElement = function (parent) {\n    let element = document.createElement('div')\n    element.className = 'dot'\n    parent.appendChild(element)\n    return element\n  }\n\n  this.createLineElement = function (parent, isVertical, x, y) {\n    let element = document.createElement('div')\n    element.className = isVertical ? 'v-line line' : 'h-line line'\n    var origin = [x, y]\n    var destination = isVertical ? [x, y + 1] : [x + 1, y]\n    element.id = `line-${origin[0]}-${origin[1]}-${destination[0]}-${destination[1]}`\n    element.addEventListener('click', (e) => {\n      this.onClickLine(origin[0], origin[1], destination[0], destination[1], this.currentPlayer)\n    })\n    parent.appendChild(element)\n    return element\n  }\n\n  this.createHorizontalLineElement = function (parent, x, y) {\n    return this.createLineElement(parent, false, x, y)\n  }\n\n  this.createVerticalLineElement = function (parent, x, y) {\n    return this.createLineElement(parent, true, x, y)\n  }\n\n  this.createBlockElement = function (parent, x, y) {\n    let element = document.createElement('div')\n    element.className = 'block'\n    element.id = `block-${x}-${y}`\n    parent.appendChild(element)\n    return element\n  }\n\n  this.createRowElement = function (parent) {\n    let element = document.createElement('div')\n    element.className = 'row'\n    parent.appendChild(element)\n    return element\n  }\n\n  this.createRowDotLine = function (container, y) {\n    var row = this.createRowElement(container)\n    for (let x = 0; x < this.size.width; x++) {\n      this.createDotElement(row, x, y)\n      this.createHorizontalLineElement(row, x, y)\n    }\n    this.createDotElement(row, this.size.width, y)\n  }\n\n  this.createLineBlockRow = function (container, y) {\n    var row = this.createRowElement(container)\n    for (let x = 0; x < this.size.width; x++) {\n      this.createVerticalLineElement(row, x, y)\n      this.createBlockElement(row, x, y)\n    }\n    this.createVerticalLineElement(row, this.size.width, y)\n  }\n\n  this.createCurrentPlayerLabel = function (container) {\n    let row = this.createRowElement(container)\n    let element = document.createElement('div')\n    element.className = 'current-player'\n    row.appendChild(element)\n    this.currentPlayerElement = element\n\n    row = this.createRowElement(container)\n    element = document.createElement('div')\n    element.className = 'other-player'\n    row.appendChild(element)\n    this.otherPlayerElement = element\n  }\n\n  this.updateCurrentPlayer = function (currentPlayer) {\n    this.container.classList.remove('red')\n    this.container.classList.remove('blue')\n    this.currentPlayerElement.classList.remove('red')\n    this.currentPlayerElement.classList.remove('blue')\n    this.otherPlayerElement.classList.remove('red')\n    this.otherPlayerElement.classList.remove('blue')\n\n    if (currentPlayer === 'blue') {\n      this.container.classList.add('blue')\n      this.currentPlayerElement.classList.add('blue')\n      this.currentPlayerElement.innerText = `Blue: ${this.points['blue']}`\n      this.otherPlayerElement.classList.add('red')\n      this.otherPlayerElement.innerText = `Red: ${this.points['red']}`\n    } else {\n      this.container.classList.add('red')\n      this.currentPlayerElement.classList.add('red')\n      this.currentPlayerElement.innerText = `Red: ${this.points['red']}`\n      this.otherPlayerElement.classList.add('blue')\n      this.otherPlayerElement.innerText = `Blue: ${this.points['blue']}`\n    }\n  }\n\n  this.createDom = function () {\n    for (let y = 0; y < this.size.height; y++) {\n      this.createRowDotLine(this.container, y)\n      this.createLineBlockRow(this.container, y)\n    }\n    this.createRowDotLine(this.container, this.size.height)\n    this.createCurrentPlayerLabel(this.container)\n    this.switchCurrentPlayer(this.currentPlayer)\n  }\n\n  this.serialize = function () {\n    return {\n      currentPlayer: this.currentPlayer,\n      connectedPoints: this.connectedPoints,\n      completedBlocks: this.completedBlocks,\n      points: this.points\n    }\n  }\n\n  this.unserialize = function (data) {\n    this.currentPlayer = data.currentPlayer\n    this.connectedPoints = data.connectedPoints\n    this.completedBlocks = data.completedBlocks\n    this.points = data.points\n    for (let y = 0; y <= this.size.height; y++) {\n      for (let x = 0; x <= this.size.width; x++) {\n        // blocks\n        if (this.completedBlocks[`${x}-${y}`]) {\n          this.markBlockAs(x, y, true, this.completedBlocks[`${x}-${y}`])\n        } else {\n          this.markBlockAs(x, y)\n        }\n        // lines left to right\n        let line = this.connectedPoints[`${x}-${y}-${x + 1}-${y}`]\n        if (line) {\n          this.markLineAsActive(x, y, x + 1, y, line)\n        } else {\n          this.markLineAs(x, y, x + 1, y)\n        }\n        // lines top to bottom\n        line = this.connectedPoints[`${x}-${y}-${x}-${y + 1}`]\n        if (line) {\n          this.markLineAsActive(x, y, x, y + 1, line)\n        } else {\n          this.markLineAs(x, y, x, y + 1)\n        }\n      }\n    }\n    this.updateCurrentPlayer(this.currentPlayer)\n  }\n\n  this.save = function () {\n    window.localStorage.setItem('data', JSON.stringify(this.serialize()))\n  }\n\n  this.load = function () {\n    this.unserialize(JSON.parse(window.localStorage.getItem('data')))\n  }\n}\n\nlet game = new GridGame()\n\nwindow.addEventListener('load', function () {\n  var container = document.getElementById('grid-game')\n  game.initialize(container)\n})\n\nwindow.addEventListener('keydown', (e) => {\n  switch (e.which) {\n    case 85:\n      // u UNDO\n      game.popFromHistory()\n      break\n    default:\n      console.log(e.which)\n  }\n})\n\nexport default () => {}\n"]}