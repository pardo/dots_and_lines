parcelRequire = (function (e, r, t, n) { var i; var o = typeof parcelRequire === 'function' && parcelRequire; var u = typeof require === 'function' && require; function f (t, n) { if (!r[t]) { if (!e[t]) { var i = typeof parcelRequire === 'function' && parcelRequire; if (!n && i) return i(t, !0); if (o) return o(t, !0); if (u && typeof t === 'string') return u(t); var c = new Error("Cannot find module '" + t + "'"); throw c.code = 'MODULE_NOT_FOUND', c }p.resolve = function (r) { return e[t][1][r] || r }, p.cache = {}; var l = r[t] = new f.Module(t); e[t][0].call(l.exports, p, l, l.exports, this) } return r[t].exports; function p (e) { return f(p.resolve(e)) } }f.isParcelRequire = !0, f.Module = function (e) { this.id = e, this.bundle = f, this.exports = {} }, f.modules = e, f.cache = r, f.parent = o, f.register = function (r, t) { e[r] = [function (e, r) { r.exports = t }, {}] }; for (var c = 0; c < t.length; c++) try { f(t[c]) } catch (e) { i || (i = e) } if (t.length) { var l = f(t[t.length - 1]); typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = l : typeof define === 'function' && define.amd ? define(function () { return l }) : n && (this[n] = l) } if (parcelRequire = f, i) throw i; return f }({
  yuMI: [function (require, module, exports) {

  }, {}],
  K8rx: [function (require, module, exports) {
    'use strict'; function t () { this.initialize = function (t) { this.container = t, this.size = { width: 6, height: 6 }, this.serializedHistory = [], this.currentPlayer = 'blue', this.points = { blue: 0, red: 0 }, this.connectedPoints = {}, this.completedBlocks = {}, this.currentPlayerElement = null, this.otherPlayerElement = null, this.createDom(), this.pushToHistory() }, this.checkEnd = function () { this.points.red + this.points.blue === this.size.width * this.size.height && (this.points.red > this.points.blue ? window.alert('Red Player Won') : this.points.red < this.points.blue ? window.alert('Blue Player Won') : window.alert('No winners')) }, this.isSquareComplete = function (t, e) { var i = ''.concat(t, '-').concat(e); var n = ''.concat(t + 1, '-').concat(e); var c = ''.concat(t, '-').concat(e + 1); var s = ''.concat(t + 1, '-').concat(e + 1); return this.connectedPoints[''.concat(i, '-').concat(n)] && this.connectedPoints[''.concat(i, '-').concat(c)] && this.connectedPoints[''.concat(c, '-').concat(s)] && this.connectedPoints[''.concat(n, '-').concat(s)] }, this.checkAndMark = function (t, e, i) { var n = !1; return !this.completedBlocks[''.concat(t, '-').concat(e)] && this.isSquareComplete(t, e) && (n = !0, this.completedBlocks[''.concat(t, '-').concat(e)] = i, this.markBlockAsActive(t, e, i)), n }, this.connectPoints = function (t, e, i, n, c) { var s = ''.concat(t, '-').concat(e); var r = ''.concat(i, '-').concat(n); if (this.connectedPoints[''.concat(s, '-').concat(r)]) return !1; this.markLineAsActive(t, e, i, n, c), this.connectedPoints[''.concat(s, '-').concat(r)] = c; var a = 0; return a += this.checkAndMark(t, e, c) ? 1 : 0, a += this.checkAndMark(t - 1, e, c) ? 1 : 0, (a += this.checkAndMark(t, e - 1, c) ? 1 : 0) > 0 ? (this.points[this.currentPlayer] += a, this.updateCurrentPlayer(this.currentPlayer), this.checkEnd()) : this.switchCurrentPlayer(this.currentPlayer), !0 }, this.pushToHistory = function () { this.serializedHistory.push(JSON.stringify(this.serialize())) }, this.popFromHistory = function () { var t = this.serializedHistory.pop(); void 0 !== t && this.unserialize(JSON.parse(t)) }, this.onClickLine = function (t, e, i, n) { this.pushToHistory(), this.connectPoints(t, e, i, n, this.currentPlayer) || this.serializedHistory.pop() }, this.switchCurrentPlayer = function (t) { this.currentPlayer = t === 'blue' ? 'red' : 'blue', this.updateCurrentPlayer(this.currentPlayer) }, this.markBlockAsActive = function (t, e, i) { this.markBlockAs(t, e, !0, i) }, this.markBlockAs = function (t, e, i, n) { var c = document.getElementById('block-'.concat(t, '-').concat(e)); c && (c.classList.remove('active'), c.classList.remove('blue'), c.classList.remove('red'), i && c.classList.add('active'), n && c.classList.add(n)) }, this.markLineAsActive = function (t, e, i, n, c) { this.markLineAs(t, e, i, n, !0, c) }, this.markLineAs = function (t, e, i, n, c, s) { var r = document.getElementById('line-'.concat(t, '-').concat(e, '-').concat(i, '-').concat(n)); r && (r.classList.remove('active'), r.classList.remove('blue'), r.classList.remove('red'), c && r.classList.add('active'), s && r.classList.add(s)) }, this.createDotElement = function (t) { var e = document.createElement('div'); return e.className = 'dot', t.appendChild(e), e }, this.createLineElement = function (t, e, i, n) { var c = this; var s = document.createElement('div'); s.className = e ? 'v-line line' : 'h-line line'; var r = [i, n]; var a = e ? [i, n + 1] : [i + 1, n]; return s.id = 'line-'.concat(r[0], '-').concat(r[1], '-').concat(a[0], '-').concat(a[1]), s.addEventListener('click', function (t) { c.onClickLine(r[0], r[1], a[0], a[1], c.currentPlayer) }), t.appendChild(s), s }, this.createHorizontalLineElement = function (t, e, i) { return this.createLineElement(t, !1, e, i) }, this.createVerticalLineElement = function (t, e, i) { return this.createLineElement(t, !0, e, i) }, this.createBlockElement = function (t, e, i) { var n = document.createElement('div'); return n.className = 'block', n.id = 'block-'.concat(e, '-').concat(i), t.appendChild(n), n }, this.createRowElement = function (t) { var e = document.createElement('div'); return e.className = 'row', t.appendChild(e), e }, this.createRowDotLine = function (t, e) { for (var i = this.createRowElement(t), n = 0; n < this.size.width; n++) this.createDotElement(i, n, e), this.createHorizontalLineElement(i, n, e); this.createDotElement(i, this.size.width, e) }, this.createLineBlockRow = function (t, e) { for (var i = this.createRowElement(t), n = 0; n < this.size.width; n++) this.createVerticalLineElement(i, n, e), this.createBlockElement(i, n, e); this.createVerticalLineElement(i, this.size.width, e) }, this.createCurrentPlayerLabel = function (t) { var e = this.createRowElement(t); var i = document.createElement('div'); i.className = 'current-player', e.appendChild(i), this.currentPlayerElement = i, e = this.createRowElement(t), (i = document.createElement('div')).className = 'other-player', e.appendChild(i), this.otherPlayerElement = i }, this.updateCurrentPlayer = function (t) { this.container.classList.remove('red'), this.container.classList.remove('blue'), this.currentPlayerElement.classList.remove('red'), this.currentPlayerElement.classList.remove('blue'), this.otherPlayerElement.classList.remove('red'), this.otherPlayerElement.classList.remove('blue'), t === 'blue' ? (this.container.classList.add('blue'), this.currentPlayerElement.classList.add('blue'), this.currentPlayerElement.innerText = 'Blue: '.concat(this.points.blue), this.otherPlayerElement.classList.add('red'), this.otherPlayerElement.innerText = 'Red: '.concat(this.points.red)) : (this.container.classList.add('red'), this.currentPlayerElement.classList.add('red'), this.currentPlayerElement.innerText = 'Red: '.concat(this.points.red), this.otherPlayerElement.classList.add('blue'), this.otherPlayerElement.innerText = 'Blue: '.concat(this.points.blue)) }, this.createDom = function () { for (var t = 0; t < this.size.height; t++) this.createRowDotLine(this.container, t), this.createLineBlockRow(this.container, t); this.createRowDotLine(this.container, this.size.height), this.createCurrentPlayerLabel(this.container), this.switchCurrentPlayer(this.currentPlayer) }, this.serialize = function () { return { currentPlayer: this.currentPlayer, connectedPoints: this.connectedPoints, completedBlocks: this.completedBlocks, points: this.points } }, this.unserialize = function (t) { this.currentPlayer = t.currentPlayer, this.connectedPoints = t.connectedPoints, this.completedBlocks = t.completedBlocks, this.points = t.points; for (var e = 0; e <= this.size.height; e++) for (var i = 0; i <= this.size.width; i++) { this.completedBlocks[''.concat(i, '-').concat(e)] ? this.markBlockAs(i, e, !0, this.completedBlocks[''.concat(i, '-').concat(e)]) : this.markBlockAs(i, e); var n = this.connectedPoints[''.concat(i, '-').concat(e, '-').concat(i + 1, '-').concat(e)]; n ? this.markLineAsActive(i, e, i + 1, e, n) : this.markLineAs(i, e, i + 1, e), (n = this.connectedPoints[''.concat(i, '-').concat(e, '-').concat(i, '-').concat(e + 1)]) ? this.markLineAsActive(i, e, i, e + 1, n) : this.markLineAs(i, e, i, e + 1) } this.updateCurrentPlayer(this.currentPlayer) }, this.save = function () { window.localStorage.setItem('data', JSON.stringify(this.serialize())) }, this.load = function () { this.unserialize(JSON.parse(window.localStorage.getItem('data'))) } }Object.defineProperty(exports, '__esModule', { value: !0 }), exports.default = void 0, require('./grid.css'); var e = new t(); window.addEventListener('load', function () { var t = document.getElementById('grid-game'); e.initialize(t) }), window.addEventListener('keydown', function (t) { switch (t.which) { case 85:e.popFromHistory(); break; default:console.log(t.which) } }); var i = function () {}; exports.default = i
  }, { './grid.css': 'yuMI' }]
}, {}, ['K8rx'], null))
// # sourceMappingURL=https://pardo.github.io/dots_and_lines/grid.9fd9d95b.js.map
